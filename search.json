[{"path":"https://wzy0716.github.io/package/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 package authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wzy0716.github.io/package/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Wang. Author, maintainer.","code":""},{"path":"https://wzy0716.github.io/package/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang E (2025). package: Make Regular Expressions Exciting. R package version 0.0.0.9000, https://wzy0716.github.io/package/.","code":"@Manual{,   title = {package: Make Regular Expressions More Exciting},   author = {Ethan Wang},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://wzy0716.github.io/package/}, }"},{"path":"https://wzy0716.github.io/package/index.html","id":"package","dir":"","previous_headings":"","what":"Make Regular Expressions More Exciting","title":"Make Regular Expressions More Exciting","text":"goal package make regular expressions exciting! provides convenience functions make common tasks string manipulation regular expressions bit easier.","code":""},{"path":"https://wzy0716.github.io/package/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make Regular Expressions More Exciting","text":"can install development version package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"wzy0716/package\")"},{"path":"https://wzy0716.github.io/package/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Make Regular Expressions More Exciting","text":"fairly common task dealing strings need split single string many parts. base::strplit() stringr::str_split() . Notice return value list length one, first element holds character vector parts. Often shape output inconvenient, .e. want un-listed version. ’s exactly package::str_split_one() . Use str_split_one() input known single string. safety, error input length greater one. str_split_one() built stringr::str_split(), can use n argument stringr’s general interface describing pattern matched.","code":"(x <- \"alfa,bravo,charlie,delta\") #> [1] \"alfa,bravo,charlie,delta\" strsplit(x, split = \",\") #> [[1]] #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" stringr::str_split(x, pattern = \",\") #> [[1]] #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" library(package)  str_split_one(x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\" str_split_one(x, pattern = \",\", n = 2) #> [1] \"alfa\"                \"bravo,charlie,delta\"  y <- \"192.168.0.1\" str_split_one(y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""},{"path":"https://wzy0716.github.io/package/reference/str_split_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string — str_split_one","title":"Split a string — str_split_one","text":"Split string","code":""},{"path":"https://wzy0716.github.io/package/reference/str_split_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string — str_split_one","text":"","code":"str_split_one(string, pattern, n = Inf)"},{"path":"https://wzy0716.github.io/package/reference/str_split_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string — str_split_one","text":"string character vector , , one element. pattern Pattern look . default interpretation regular expression, described vignette(\"regular-expressions\"). Use regex() finer control matching behaviour. Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale. Match character, word, line sentence boundaries boundary(). empty pattern, \"\", equivalent boundary(\"character\"). n Maximum number pieces return. Default (Inf) uses possible split positions. str_split(), determines maximum length element output. str_split_fixed(), determines number columns output; input short, result padded \"\".","code":""},{"path":"https://wzy0716.github.io/package/reference/str_split_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string — str_split_one","text":"character vector.","code":""},{"path":"https://wzy0716.github.io/package/reference/str_split_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string — str_split_one","text":"","code":"x <- \"alfa,bravo,charlie,delta\" str_split_one(x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"   str_split_one(x, pattern = \",\", n = 2) #> [1] \"alfa\"                \"bravo,charlie,delta\"  y <- \"192.168.0.1\" str_split_one(y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""}]
